
'''
In Python, for loops iterate over any iterable object (e.g., lists, strings, ranges, dictionaries, 
etc.), which means that Python,s for loop is an iterator-based loop.
'''

for i in range(5):
    print(i)

'''
* range(5) creates an iterable that generates numbers from 0 to 4.
* for i in range(5): automatically retrieves each item in the sequence generated by range(5) and 
assigns it to i.
* The loop continues until it exhausts the iterator.

'''

fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

'''
* Iterator vs. Range-Based: Pythonâ€™s for loop can iterate over any iterable, making it versatile for 
collections and custom objects. MATLAB's for loop iterates over a predefined array or range, and 
is therefore more range-bound.

* Flexibility: Python's iterator-based for loop can handle diverse data structures seamlessly. 
MATLAB's range-based for loop works best with numeric sequences and requires more setup for 
non-numeric data types. 

* Syntax and Indexing: Python's syntax naturally supports iteration without explicit indexing. 
MATLAB usually requires specifying ranges, though you can also iterate directly over arrays.

'''